# Generated by Django 5.1.5 on 2025-10-27 15:13

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('event_taxonomy', '0002_seed_initial_data'),
    ]

    operations = [
        migrations.CreateModel(
            name='BroadcastabilityConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sport_appeal_weight', models.FloatField(default=0.35, help_text='Peso del componente sport_appeal (0.0-1.0, default 0.35 = 35%)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='Peso: Atractivo del deporte')),
                ('competition_level_weight', models.FloatField(default=0.3, help_text='Peso del componente competition_level (0.0-1.0, default 0.30 = 30%)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='Peso: Nivel de competición')),
                ('hype_indicators_weight', models.FloatField(default=0.2, help_text='Peso del componente hype_indicators (0.0-1.0, default 0.20 = 20%)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='Peso: Indicadores de hype')),
                ('attendance_weight', models.FloatField(default=0.15, help_text='Peso del componente attendance (0.0-1.0, default 0.15 = 15%)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='Peso: Asistencia')),
                ('min_broadcastability_score', models.FloatField(default=0.55, help_text='Score >= este valor se marca como broadcastable (default 0.55)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='Puntuación mínima de broadcastability')),
                ('attendance_small', models.IntegerField(default=5000, help_text='< este valor = asistencia muy baja', verbose_name='Umbral de asistencia: Pequeño')),
                ('attendance_medium', models.IntegerField(default=20000, help_text='< este valor = asistencia mediana', verbose_name='Umbral de asistencia: Mediano')),
                ('attendance_large', models.IntegerField(default=50000, help_text='< este valor = asistencia grande, >= este valor = masiva', verbose_name='Umbral de asistencia: Grande')),
                ('requires_tv_screens', models.BooleanField(default=True, help_text='Si True, eventos broadcastables solo relevantes para negocios con has_tv_screens=True', verbose_name='Requiere pantallas de TV')),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Configuración de Broadcastability',
                'verbose_name_plural': 'Configuración de Broadcastability',
            },
        ),
        migrations.CreateModel(
            name='HypeIndicator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pattern', models.CharField(help_text='Expresión regular (ej: r"final|semifinal", r"egan bernal|nairo quintana")', max_length=500, verbose_name='Patrón regex')),
                ('description', models.CharField(blank=True, help_text='Descripción del patrón (ej: "Detecta lenguaje de finales")', max_length=200, verbose_name='Descripción')),
                ('hype_boost', models.FloatField(help_text='0.0-0.5: cuánto aumenta el hype_score al coincidir', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(0.5)], verbose_name='Impulso de hype')),
                ('category', models.CharField(choices=[('finals', 'Finals/Championships'), ('historic', 'Historic Significance'), ('rivalry', 'Rivalries/Derbies'), ('stakes', 'High Stakes'), ('scale', 'Massive Scale'), ('star_power', 'Star Athletes'), ('colombian', 'Colombian Involvement')], help_text='Tipo de indicador de hype', max_length=20, verbose_name='Categoría')),
                ('language', models.CharField(default='es', help_text='Idioma del patrón (es=español, en=inglés)', max_length=2, verbose_name='Idioma')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Indicador de Hype',
                'verbose_name_plural': 'Indicadores de Hype',
                'ordering': ['-hype_boost', 'category'],
            },
        ),
        migrations.CreateModel(
            name='SportType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Identificador del deporte (ej: soccer, cycling, combat_sports)', max_length=50, unique=True, verbose_name='Código')),
                ('name_es', models.CharField(help_text='Nombre en español (ej: Fútbol, Ciclismo)', max_length=100, verbose_name='Nombre (Español)')),
                ('name_en', models.CharField(help_text='Nombre en inglés (ej: Soccer, Cycling)', max_length=100, verbose_name='Nombre (Inglés)')),
                ('description', models.TextField(blank=True, help_text='Descripción del deporte y su relevancia en Latinoamérica', verbose_name='Descripción')),
                ('latin_america_appeal', models.FloatField(help_text='Puntuación 0.0-1.0: qué tanto atrae audiencias en bares/pubs (0.95=fútbol, 0.10=esquí)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='Atractivo en Latinoamérica')),
                ('keywords', models.JSONField(default=list, help_text='Lista de keywords en español para detección: ["fútbol", "partido", "gol"]', verbose_name='Palabras clave')),
                ('is_active', models.BooleanField(default=True, help_text='Si está desactivado, no se usará en cálculo de broadcastability', verbose_name='Activo')),
                ('display_order', models.IntegerField(default=0, verbose_name='Orden de visualización')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Tipo de Deporte',
                'verbose_name_plural': 'Tipos de Deportes',
                'ordering': ['-latin_america_appeal', 'display_order'],
            },
        ),
        migrations.CreateModel(
            name='CompetitionLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Identificador de la competición (ej: world_cup_final, tour_de_france)', max_length=100, unique=True, verbose_name='Código')),
                ('name_es', models.CharField(help_text='Nombre de la competición (ej: Copa Mundial, Tour de Francia)', max_length=150, verbose_name='Nombre (Español)')),
                ('name_en', models.CharField(help_text='Nombre en inglés (ej: World Cup, Tour de France)', max_length=150, verbose_name='Nombre (Inglés)')),
                ('description', models.TextField(blank=True, verbose_name='Descripción')),
                ('broadcast_multiplier', models.FloatField(help_text='0.1-3.0: impacto en broadcastability (3.0=Mundial, 1.0=liga regular, 0.4=segunda división)', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(3.0)], verbose_name='Multiplicador de transmisión')),
                ('typical_attendance_min', models.IntegerField(default=0, help_text='Asistencia típica del evento (para validación)', verbose_name='Asistencia típica mínima')),
                ('keywords', models.JSONField(default=list, help_text='Patrones de detección: ["copa mundial", "final", "clasificatorias"]', verbose_name='Palabras clave')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
                ('display_order', models.IntegerField(default=0, verbose_name='Orden de visualización')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sport_type', models.ForeignKey(blank=True, help_text='Deporte al que pertenece (null = aplica a todos)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='competition_levels', to='event_taxonomy.sporttype', verbose_name='Tipo de deporte')),
            ],
            options={
                'verbose_name': 'Nivel de Competición',
                'verbose_name_plural': 'Niveles de Competición',
                'ordering': ['-broadcast_multiplier', 'display_order'],
            },
        ),
    ]
